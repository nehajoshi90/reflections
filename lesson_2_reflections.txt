What happens when you initialize a repository? Why do you need to do it?
Git init initilise the repository. .git file is created that contain the metadata of that repository. We need it
to create git repository to support version-control

How is the staging area different from the working directory and the repository?
What value do you think it offers?
staging area is the area between the working directory and the repository. We work on the code in the working area
and then we put them into the staging area for commit. Now staging area provides feature that we add only those files
into staging area that we want to commit and can kepp other files for later commit. Files added to staging area
will be bundled for the commit and added to updated in repository

How can you use the staging area to make sure you have one commit per logical
change?
As we are complete with on logical implementation we can move that file to the staging ares and then run commit.
This will updated only the file of staging area to the repository

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branched would be helpful if we want are main branch to function as it is which is to be shown to people and side
by side we want some experiemntal changes to be done of which we are not sure how successfull will it be or we want 
some featue to be added to are project but we want it to be do it separatly and add only when it is successful. 
These are the features we fully expect to break and are not quality prduction work yet. In such case we can have 
branches for other feature and have main branch that will always work, we can fix bugs on it or add desired feature 
which we can show to people

How do the diagrams help you visualize the branch structure?
Diagram help to understand the concept of reachability. It helps to know which commits are reachable from which 
branch and which commit will behave as it never existed if we make a commit on commit id other than the branch and
then checkout the branch

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Merging two branches will bring the changes of other branch into the checke out branch. Diagram help us to better 
understand how merging takes place 

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
pros: automatic merge: it takes a lot of burden by merging the entire commit with another commit whereas in manual
mwerging we ensure that everything merged is correct as we manually check to see the merged files
cons: automatic merge: some files can be wrongly merged and this will bring bugs whereas in manual merging its tedious
to merge all the files manually
